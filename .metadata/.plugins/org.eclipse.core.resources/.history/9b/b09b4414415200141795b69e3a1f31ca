package seankelly.androidmap3;

import java.io.BufferedInputStream;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.net.MalformedURLException;
import java.net.URL;

import org.apache.http.HttpResponse;
import org.apache.http.client.HttpClient;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.impl.client.DefaultHttpClient;

import android.support.v7.app.ActionBarActivity;
import android.net.ConnectivityManager;
import android.net.NetworkInfo;
import android.net.Uri;
import android.os.AsyncTask;
import android.os.Bundle;
import android.util.Log;
import android.view.Menu;
import android.view.MenuItem;
import android.view.View;
import android.widget.EditText;
import android.widget.Toast;

public class MainActivity extends ActionBarActivity {
	
	//reference for this HTTP GET from
	// http://hmkcode.com/android-internet-connection-using-http-get-httpclient/

	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_main);
	}

	@Override
	public boolean onCreateOptionsMenu(Menu menu) {
		// Inflate the menu; this adds items to the action bar if it is present.
		getMenuInflater().inflate(R.menu.main, menu);
		return true;
	}

	@Override
	public boolean onOptionsItemSelected(MenuItem item) {
		// Handle action bar item clicks here. The action bar will
		// automatically handle clicks on the Home/Up button, so long
		// as you specify a parent activity in AndroidManifest.xml.
		int id = item.getItemId();
		if (id == R.id.action_settings) {
			return true;
		}
		return super.onOptionsItemSelected(item);
	}

	public void searchAddress(View v) {
		/*
		 * EditText input = (EditText) findViewById(R.id.enterAddress); String
		 * address = input.getText().toString(); String [] addressChunks =
		 * address.split("[ ,]+"); Uri.Builder builder = new Uri.Builder();
		 * 
		 * https://maps.googleapis.com/maps/api/geocode/json?address=1600+
		 * Amphitheatre+Parkway,+Mountain+View,+CA&key=API_KEY
		 * 
		 * https://www.myawesomesite.com/turtles/types?type=1&sort=relevance#section
		 * -name
		 * builder.scheme("https").authority("www.myawesomesite.com").appendPath
		 * ("turtles").appendPath("types").appendQueryParameter("type",
		 * "1").appendQueryParameter("sort",
		 * "relevance").fragment("section-name");
		 * builder.scheme("https").authority
		 * ("maps.googleapis.com/maps/api/geocode/json"
		 * ).appendQueryParameter("address", "1").appendQueryParameter("sort",
		 * "relevance").fragment("section-name");
		 * 
		 * String myUrl = builder.build().toString();
		 */

		EditText input = (EditText) findViewById(R.id.enterAddress);
		String address = input.getText().toString();
		String[] addressChunks = address.split("[ ]+");
		String addressQuery = "https://maps.googleapis.com/maps/api/geocode/json?";

		if (addressChunks.length > 0) {
			addressQuery += addressChunks[0];
		}

		for (int i = 1; i < addressChunks.length; i++) {
			addressQuery += "+";
			addressQuery += addressChunks[i];
		}

		addressQuery += "&key=AIzaSyDa5bOs7vXkU8Pkg_mqA0I8bizJVTY6ISs";
		
		new HttpAsyncTask().execute(addressQuery);

		
	}

	private static String readStream(InputStream is) throws IOException {
		StringBuilder ans = new StringBuilder();
		BufferedReader br = new BufferedReader(new InputStreamReader(is));
		// ^^^ provide a size of the buffer????

		for (String currentLine = br.readLine(); currentLine != null; currentLine = br
				.readLine()) {
			ans.append(currentLine);
		}

		is.close();

		return ans.toString();
	}

	private class HttpAsyncTask extends AsyncTask<String, Void, String> {

		@Override
		protected String doInBackground(String... urls) {

			return GET(urls[0]);
		}

		// onPostExecute displays the results of the AsyncTask.
		@Override
		protected void onPostExecute(String result) {
			Toast.makeText(getBaseContext(), "Received!: " + result, Toast.LENGTH_LONG)
					.show();
			//etResponse.setText("oh? " + result);
		}
	}
	
	 public static String GET(String url){
	        InputStream inputStream = null;
	        String result = "";
	        try {
	 
	            // create HttpClient
	            HttpClient httpclient = new DefaultHttpClient();
	 
	            // make GET request to the given URL
	            HttpResponse httpResponse = httpclient.execute(new HttpGet(url));
	 
	            // receive response as inputStream
	            inputStream = httpResponse.getEntity().getContent();
	 
	            // convert inputstream to string
	            if(inputStream != null)
	                result = readStream(inputStream);
	            else
	                result = "Did not work!";
	 
	        } catch (Exception e) {
	            Log.d("InputStream", e.getLocalizedMessage());
	        }
	 
	        return result;
	    }
	 
	    public boolean isConnected(){
	        ConnectivityManager connMgr = (ConnectivityManager) getSystemService(this.CONNECTIVITY_SERVICE);
	            NetworkInfo networkInfo = connMgr.getActiveNetworkInfo();
	            if (networkInfo != null && networkInfo.isConnected()) 
	                return true;
	            else
	                return false;   
	    }
}
